name: Build and Push Server Application to AWS DEVELOPMENT
on:
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x]
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: yarn install, lint, test
        run: |
          yarn install --frozen-lockfile
          yarn run lint
          yarn run test:coverage -w 1
        env:
          CI: true
          NODE_ENV: test
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
      - name: report code coverage
        run: npx codecov@3
        if: matrix.node-version == '10.x'
        env:
          CI: true
          NODE_ENV: test
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Login to AWS
        run: $(aws ecr get-login --region ${{ secrets.AWS_REGION }} --no-include-email)
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
      - name: Build and push Docker Image
        run: |
          build_date=$(date +%Y%m%d%H%M%S)
          git_sha=$(git rev-parse --short ${{ github.sha }})
          app_version=$(expr ${build_date}-${git_sha})
          expr ${app_version} > app_version
          docker build . --file Dockerfile --tag dx:${app_version} --build-arg APP_VERSION=${app_version}
          docker tag dx:${app_version} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dx:${app_version}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dx:${app_version}
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
      - name: Update task definition to new server image on DEVELOPMENT cluster
        run: |
          app_version=`cat app_version`
          ecr_image="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dx:${app_version}"
          aws s3 cp s3://${{ secrets.CLOUDFORMATION_BUCKET }}/${{ secrets.CLOUDFORMATION_DEV_PARAMETERS }} ${{ secrets.CLOUDFORMATION_DEV_PARAMETERS }}
          cat ${{ secrets.CLOUDFORMATION_DEV_PARAMETERS }} | jq 'map(if .ParameterKey == "ServerImage" then . + {"ParameterValue": "$(ecr_image)"} else . end)' > ${{ secrets.CLOUDFORMATION_DEV_PARAMETERS }}
          aws s3 cp ${{ secrets.CLOUDFORMATION_DEV_PARAMETERS }} s3://${{ secrets.CLOUDFORMATION_BUCKET }}/${{ secrets.CLOUDFORMATION_DEV_PARAMETERS }}
          PARAMETERS=$(cat ${{ secrets.CLOUDFORMATION_DEV_PARAMETERS }})
          aws cloudformation update-stack --template-url https://${{ secrets.CLOUDFORMATION_BUCKET }}.s3-${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.CLOUDFORMATION_TEMPLATE_FILE }} --stack-name ${{ secrets.CLOUDFORMATION_DEV_STACKNAME }} --capabilities CAPABILITY_NAMED_IAM --parameters $PARAMETERS
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
