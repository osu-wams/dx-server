name: Build and Push Server Application to AWS
on:
  push:
    branches:
    - master
    - stage
    - production

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x]
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: yarn install, lint, test
      run: |
        yarn install --frozen-lockfile
        yarn run lint
        yarn run test:coverage -w 1
      env:
        CI: true
        NODE_ENV: test
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
    - name: report code coverage
      run: npx codecov@3
      if: matrix.node-version == '10.x'
      env:
        CI: true
        NODE_ENV: test
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}      
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Login to AWS
      run: $(aws ecr get-login --region ${{ secrets.AWS_REGION }} --no-include-email)
      env:
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
    - name: Build and push Docker Image
      run: |
          build_date=$(date +%s)
          expr ${build_date} > build_date
          docker build . --file Dockerfile --tag dx:${build_date}         
          docker tag dx:${build_date} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dx:${build_date}          
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dx:${build_date}
      env:
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
    - name: Update task definition to new server image on DEVELOPMENT cluster
      if: github.base_ref == 'master'
      run: |
          build_date=`cat build_date`
          ecr_image="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dx:${build_date}"
          task_definition=$(aws ecs describe-task-definition --task-definition "my-dev-ecs-task" --region ${{ secrets.AWS_REGION }})
          new_task_definition=$(echo ${task_definition} | jq --arg IMAGE "${ecr_image}" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
          new_task_info=$(aws ecs register-task-definition --region ${{ secrets.AWS_REGION }} --cli-input-json "${new_task_definition}")
          new_revision=$(echo ${new_task_info} | jq '.taskDefinition.revision')
          aws ecs update-service --cluster my-dev-cluster --service my-dev-service --task-definition my-dev-ecs-task:${new_revision}
      env:
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}        
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
    - name: Update task definition to new server image on STAGE cluster
      if: github.base_ref == 'stage'
      run: |
          build_date=`cat build_date`
          ecr_image="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dx:${build_date}"
          task_definition=$(aws ecs describe-task-definition --task-definition "osu-dx-stage-ecs-task" --region ${{ secrets.AWS_REGION }})
          new_task_definition=$(echo ${task_definition} | jq --arg IMAGE "${ecr_image}" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
          new_task_info=$(aws ecs register-task-definition --region ${{ secrets.AWS_REGION }} --cli-input-json "${new_task_definition}")
          new_revision=$(echo ${new_task_info} | jq '.taskDefinition.revision')
          aws ecs update-service --cluster osu-dx-stage-cluster --service osu-dx-stage-service --task-definition osu-dx-stage-ecs-task:${new_revision}
      env:
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}        
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}       
    - name: Update task definition to new server image on PRODUCTION cluster
      if: github.base_ref == 'production'
      run: |
          build_date=`cat build_date`
          ecr_image="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dx:${build_date}"
          task_definition=$(aws ecs describe-task-definition --task-definition "osu-dx-production-ecs-task" --region ${{ secrets.AWS_REGION }})
          new_task_definition=$(echo ${task_definition} | jq --arg IMAGE "${ecr_image}" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
          new_task_info=$(aws ecs register-task-definition --region ${{ secrets.AWS_REGION }} --cli-input-json "${new_task_definition}")
          new_revision=$(echo ${new_task_info} | jq '.taskDefinition.revision')
          aws ecs update-service --cluster osu-dx-production-cluster --service osu-dx-production-service --task-definition osu-dx-production-ecs-task:${new_revision}
      env:
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}        
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}         
